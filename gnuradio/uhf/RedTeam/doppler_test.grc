options:
  parameters:
    author: knud
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: doppler_test
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: center_freq_rx
  id: variable
  parameters:
    comment: ''
    value: '437875000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 12.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: analog_const_source_x_0
  id: analog_const_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: center_freq_rx
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 64.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: 437875000 - center_freq_rx
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 480.0]
    rotation: 0
    state: disabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 312.0]
    rotation: 0
    state: disabled
- name: blocks_socket_pdu_0
  id: blocks_socket_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    host: localhost
    maxoutbuf: '0'
    minoutbuf: '0'
    mtu: '10000'
    port: '4532'
    tcp_no_delay: 'False'
    type: UDP_CLIENT
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 284.0]
    rotation: 0
    state: disabled
- name: blocks_tagged_stream_to_pdu_0
  id: blocks_tagged_stream_to_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 404.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      import socket\nimport time\nfrom gnuradio import gr\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ example_param=1.0):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='gpredict listener',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n        \n        bind_to = ('127.0.0.1', 4532)\n       \
      \ server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        print(bind_to)\n\
      \        server.bind(bind_to)\n        server.listen(0)\n\n        time.sleep(0.5)\n\
      \n    def work(self, input_items, output_items):\n        \"\"\"example: multiply\
      \ with constant\"\"\"\n        output_items[0][:] = input_items[0] * self.example_param\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('gpredict listener', 'blk', [('example_param', '1.0')], [('0', 'float',
      1)], [('0', 'float', 1)], 'Embedded Python Block example - a simple multiply
      const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1104, 156.0]
    rotation: 0
    state: disabled
- name: gpredict_doppler
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "# this module will be imported in the into your flowgraph\nfrom\
      \ gnuradio import gr\nimport threading\nimport time\nimport socket\n\nclass\
      \ doppler_runner(threading.Thread):\n  def __init__(self, callback, freq, gpredict_host,\
      \ gpredict_port):\n    threading.Thread.__init__(self)\n\n    self.callback\
      \ = callback\n    self.gpredict_host = gpredict_host\n    self.gpredict_port\
      \ = gpredict_port\n    self.freq = freq\n\n\n  def run(self):\n    #bind_to\
      \ = (self.gpredict_host, self.gpredict_port)\n    bind_to = ('127.0.0.1', 4532)\n\
      \    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    print(bind_to)\n\
      \    server.bind(bind_to)\n    server.listen(0)\n\n    time.sleep(0.5) # TODO:\
      \ Find better way to know if init is all done\n\n    while True:\n      print(\"\
      Waiting for connection on: %s:%d\" % bind_to)\n      sock, addr = server.accept()\n\
      \      print(\"Connected from: %s:%d\" % (addr[0], addr[1]))\n\n      cur_freq\
      \ = 0\n      while True:\n        data = sock.recv(1024)\n        if not data:\n\
      \          break\n\n        if data.startswith(b'F'):\n          self.freq =\
      \ int(data[1:].strip())\n          if cur_freq != self.freq:\n            print(\"\
      New frequency: %d\" % self.freq)\n            self.callback(self.freq)\n   \
      \         cur_freq = self.freq\n          sock.sendall(b'RPRT 0\\n')\n     \
      \   elif data.startswith(b'f'):\n          sock.sendall(b'f: %d\\n' % cur_freq)\n\
      \n      sock.close()\n      print(\"Disconnected from: %s:%d\" % (addr[0], addr[1]))\n\
      \n    #sys.exit()\n\nclass doppler(gr.sync_block):\n  def __init__(self, callback,\
      \ freq, gpredict_host, gpredict_port):\n    gr.sync_block.__init__(self,\n \
      \                          name = \"Gpredict Doppler\",\n                  \
      \         in_sig = None,\n                           out_sig = None)\n    doppler_runner(callback,\
      \ freq, gpredict_host, gpredict_port).start()\n\n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 164.0]
    rotation: 0
    state: disabled
- name: gpredict_doppler_1
  id: gpredict_doppler
  parameters:
    alias: ''
    comment: ''
    gpredict_host: localhost
    gpredict_port: '4532'
    target: center_freq_rx
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 148.0]
    rotation: 0
    state: enabled
- name: network_udp_source_0
  id: network_udp_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    header: '0'
    ipv6: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    notify_missed: 'False'
    payloadsize: '1472'
    port: '4532'
    src_zeros: 'False'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [352, 324.0]
    rotation: 0
    state: disabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'True'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 480.0]
    rotation: 0
    state: disabled
- name: qtgui_number_sink_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '""'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1368, 288.0]
    rotation: 0
    state: enabled

connections:
- [analog_const_source_x_0, '0', epy_block_0, '0']
- [analog_const_source_x_0, '0', qtgui_number_sink_0, '0']
- [analog_sig_source_x_0, '0', qtgui_freq_sink_x_0, '0']
- [blocks_socket_pdu_0, pdus, blocks_message_debug_0, print]
- [blocks_tagged_stream_to_pdu_0, pdus, blocks_message_debug_0, print_pdu]
- [epy_block_0, '0', qtgui_number_sink_0, '0']
- [network_udp_source_0, '0', blocks_tagged_stream_to_pdu_0, '0']

metadata:
  file_format: 1
  grc_version: 3.9.7.0
